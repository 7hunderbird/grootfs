// This file was generated by counterfeiter
package image_pullerfakes

import (
	"io"
	"sync"

	"code.cloudfoundry.org/grootfs/image_puller"
	"code.cloudfoundry.org/lager"
)

type FakeStreamer struct {
	StreamStub        func(logger lager.Logger, source string) (io.ReadCloser, int64, error)
	streamMutex       sync.RWMutex
	streamArgsForCall []struct {
		logger lager.Logger
		source string
	}
	streamReturns struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStreamer) Stream(logger lager.Logger, source string) (io.ReadCloser, int64, error) {
	fake.streamMutex.Lock()
	fake.streamArgsForCall = append(fake.streamArgsForCall, struct {
		logger lager.Logger
		source string
	}{logger, source})
	fake.recordInvocation("Stream", []interface{}{logger, source})
	fake.streamMutex.Unlock()
	if fake.StreamStub != nil {
		return fake.StreamStub(logger, source)
	} else {
		return fake.streamReturns.result1, fake.streamReturns.result2, fake.streamReturns.result3
	}
}

func (fake *FakeStreamer) StreamCallCount() int {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return len(fake.streamArgsForCall)
}

func (fake *FakeStreamer) StreamArgsForCall(i int) (lager.Logger, string) {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return fake.streamArgsForCall[i].logger, fake.streamArgsForCall[i].source
}

func (fake *FakeStreamer) StreamReturns(result1 io.ReadCloser, result2 int64, result3 error) {
	fake.StreamStub = nil
	fake.streamReturns = struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeStreamer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStreamer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image_puller.Streamer = new(FakeStreamer)
