// This file was generated by counterfeiter
package image_clonerfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/grootfs/store/image_cloner"
	"code.cloudfoundry.org/lager"
)

type FakeImageDriver struct {
	CreateImageStub        func(logger lager.Logger, fromPath, toPath string) error
	createImageMutex       sync.RWMutex
	createImageArgsForCall []struct {
		logger   lager.Logger
		fromPath string
		toPath   string
	}
	createImageReturns struct {
		result1 error
	}
	DestroyImageStub        func(logger lager.Logger, path string) error
	destroyImageMutex       sync.RWMutex
	destroyImageArgsForCall []struct {
		logger lager.Logger
		path   string
	}
	destroyImageReturns struct {
		result1 error
	}
	ApplyDiskLimitStub        func(logger lager.Logger, path string, diskLimit int64, exclusive bool) error
	applyDiskLimitMutex       sync.RWMutex
	applyDiskLimitArgsForCall []struct {
		logger    lager.Logger
		path      string
		diskLimit int64
		exclusive bool
	}
	applyDiskLimitReturns struct {
		result1 error
	}
	FetchStatsStub        func(logger lager.Logger, path string) (groot.VolumeStats, error)
	fetchStatsMutex       sync.RWMutex
	fetchStatsArgsForCall []struct {
		logger lager.Logger
		path   string
	}
	fetchStatsReturns struct {
		result1 groot.VolumeStats
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageDriver) CreateImage(logger lager.Logger, fromPath string, toPath string) error {
	fake.createImageMutex.Lock()
	fake.createImageArgsForCall = append(fake.createImageArgsForCall, struct {
		logger   lager.Logger
		fromPath string
		toPath   string
	}{logger, fromPath, toPath})
	fake.recordInvocation("CreateImage", []interface{}{logger, fromPath, toPath})
	fake.createImageMutex.Unlock()
	if fake.CreateImageStub != nil {
		return fake.CreateImageStub(logger, fromPath, toPath)
	} else {
		return fake.createImageReturns.result1
	}
}

func (fake *FakeImageDriver) CreateImageCallCount() int {
	fake.createImageMutex.RLock()
	defer fake.createImageMutex.RUnlock()
	return len(fake.createImageArgsForCall)
}

func (fake *FakeImageDriver) CreateImageArgsForCall(i int) (lager.Logger, string, string) {
	fake.createImageMutex.RLock()
	defer fake.createImageMutex.RUnlock()
	return fake.createImageArgsForCall[i].logger, fake.createImageArgsForCall[i].fromPath, fake.createImageArgsForCall[i].toPath
}

func (fake *FakeImageDriver) CreateImageReturns(result1 error) {
	fake.CreateImageStub = nil
	fake.createImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageDriver) DestroyImage(logger lager.Logger, path string) error {
	fake.destroyImageMutex.Lock()
	fake.destroyImageArgsForCall = append(fake.destroyImageArgsForCall, struct {
		logger lager.Logger
		path   string
	}{logger, path})
	fake.recordInvocation("DestroyImage", []interface{}{logger, path})
	fake.destroyImageMutex.Unlock()
	if fake.DestroyImageStub != nil {
		return fake.DestroyImageStub(logger, path)
	} else {
		return fake.destroyImageReturns.result1
	}
}

func (fake *FakeImageDriver) DestroyImageCallCount() int {
	fake.destroyImageMutex.RLock()
	defer fake.destroyImageMutex.RUnlock()
	return len(fake.destroyImageArgsForCall)
}

func (fake *FakeImageDriver) DestroyImageArgsForCall(i int) (lager.Logger, string) {
	fake.destroyImageMutex.RLock()
	defer fake.destroyImageMutex.RUnlock()
	return fake.destroyImageArgsForCall[i].logger, fake.destroyImageArgsForCall[i].path
}

func (fake *FakeImageDriver) DestroyImageReturns(result1 error) {
	fake.DestroyImageStub = nil
	fake.destroyImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageDriver) ApplyDiskLimit(logger lager.Logger, path string, diskLimit int64, exclusive bool) error {
	fake.applyDiskLimitMutex.Lock()
	fake.applyDiskLimitArgsForCall = append(fake.applyDiskLimitArgsForCall, struct {
		logger    lager.Logger
		path      string
		diskLimit int64
		exclusive bool
	}{logger, path, diskLimit, exclusive})
	fake.recordInvocation("ApplyDiskLimit", []interface{}{logger, path, diskLimit, exclusive})
	fake.applyDiskLimitMutex.Unlock()
	if fake.ApplyDiskLimitStub != nil {
		return fake.ApplyDiskLimitStub(logger, path, diskLimit, exclusive)
	} else {
		return fake.applyDiskLimitReturns.result1
	}
}

func (fake *FakeImageDriver) ApplyDiskLimitCallCount() int {
	fake.applyDiskLimitMutex.RLock()
	defer fake.applyDiskLimitMutex.RUnlock()
	return len(fake.applyDiskLimitArgsForCall)
}

func (fake *FakeImageDriver) ApplyDiskLimitArgsForCall(i int) (lager.Logger, string, int64, bool) {
	fake.applyDiskLimitMutex.RLock()
	defer fake.applyDiskLimitMutex.RUnlock()
	return fake.applyDiskLimitArgsForCall[i].logger, fake.applyDiskLimitArgsForCall[i].path, fake.applyDiskLimitArgsForCall[i].diskLimit, fake.applyDiskLimitArgsForCall[i].exclusive
}

func (fake *FakeImageDriver) ApplyDiskLimitReturns(result1 error) {
	fake.ApplyDiskLimitStub = nil
	fake.applyDiskLimitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageDriver) FetchStats(logger lager.Logger, path string) (groot.VolumeStats, error) {
	fake.fetchStatsMutex.Lock()
	fake.fetchStatsArgsForCall = append(fake.fetchStatsArgsForCall, struct {
		logger lager.Logger
		path   string
	}{logger, path})
	fake.recordInvocation("FetchStats", []interface{}{logger, path})
	fake.fetchStatsMutex.Unlock()
	if fake.FetchStatsStub != nil {
		return fake.FetchStatsStub(logger, path)
	} else {
		return fake.fetchStatsReturns.result1, fake.fetchStatsReturns.result2
	}
}

func (fake *FakeImageDriver) FetchStatsCallCount() int {
	fake.fetchStatsMutex.RLock()
	defer fake.fetchStatsMutex.RUnlock()
	return len(fake.fetchStatsArgsForCall)
}

func (fake *FakeImageDriver) FetchStatsArgsForCall(i int) (lager.Logger, string) {
	fake.fetchStatsMutex.RLock()
	defer fake.fetchStatsMutex.RUnlock()
	return fake.fetchStatsArgsForCall[i].logger, fake.fetchStatsArgsForCall[i].path
}

func (fake *FakeImageDriver) FetchStatsReturns(result1 groot.VolumeStats, result2 error) {
	fake.FetchStatsStub = nil
	fake.fetchStatsReturns = struct {
		result1 groot.VolumeStats
		result2 error
	}{result1, result2}
}

func (fake *FakeImageDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createImageMutex.RLock()
	defer fake.createImageMutex.RUnlock()
	fake.destroyImageMutex.RLock()
	defer fake.destroyImageMutex.RUnlock()
	fake.applyDiskLimitMutex.RLock()
	defer fake.applyDiskLimitMutex.RUnlock()
	fake.fetchStatsMutex.RLock()
	defer fake.fetchStatsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeImageDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image_cloner.ImageDriver = new(FakeImageDriver)
