// Code generated by counterfeiter. DO NOT EDIT.
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/lager"
)

type FakeStoreMeasurer struct {
	UsageStub        func(logger lager.Logger) (int64, error)
	usageMutex       sync.RWMutex
	usageArgsForCall []struct {
		logger lager.Logger
	}
	usageReturns struct {
		result1 int64
		result2 error
	}
	usageReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreMeasurer) Usage(logger lager.Logger) (int64, error) {
	fake.usageMutex.Lock()
	ret, specificReturn := fake.usageReturnsOnCall[len(fake.usageArgsForCall)]
	fake.usageArgsForCall = append(fake.usageArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("Usage", []interface{}{logger})
	fake.usageMutex.Unlock()
	if fake.UsageStub != nil {
		return fake.UsageStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.usageReturns.result1, fake.usageReturns.result2
}

func (fake *FakeStoreMeasurer) UsageCallCount() int {
	fake.usageMutex.RLock()
	defer fake.usageMutex.RUnlock()
	return len(fake.usageArgsForCall)
}

func (fake *FakeStoreMeasurer) UsageArgsForCall(i int) lager.Logger {
	fake.usageMutex.RLock()
	defer fake.usageMutex.RUnlock()
	return fake.usageArgsForCall[i].logger
}

func (fake *FakeStoreMeasurer) UsageReturns(result1 int64, result2 error) {
	fake.UsageStub = nil
	fake.usageReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreMeasurer) UsageReturnsOnCall(i int, result1 int64, result2 error) {
	fake.UsageStub = nil
	if fake.usageReturnsOnCall == nil {
		fake.usageReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.usageReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreMeasurer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.usageMutex.RLock()
	defer fake.usageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoreMeasurer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.StoreMeasurer = new(FakeStoreMeasurer)
