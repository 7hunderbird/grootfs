// This file was generated by counterfeiter
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
)

type FakeDependencyManager struct {
	DependenciesStub        func(id string) ([]string, error)
	dependenciesMutex       sync.RWMutex
	dependenciesArgsForCall []struct {
		id string
	}
	dependenciesReturns struct {
		result1 []string
		result2 error
	}
	RegisterStub        func(id string, chainIDs []string) error
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		id       string
		chainIDs []string
	}
	registerReturns struct {
		result1 error
	}
	DeregisterStub        func(id string) error
	deregisterMutex       sync.RWMutex
	deregisterArgsForCall []struct {
		id string
	}
	deregisterReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDependencyManager) Dependencies(id string) ([]string, error) {
	fake.dependenciesMutex.Lock()
	fake.dependenciesArgsForCall = append(fake.dependenciesArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("Dependencies", []interface{}{id})
	fake.dependenciesMutex.Unlock()
	if fake.DependenciesStub != nil {
		return fake.DependenciesStub(id)
	} else {
		return fake.dependenciesReturns.result1, fake.dependenciesReturns.result2
	}
}

func (fake *FakeDependencyManager) DependenciesCallCount() int {
	fake.dependenciesMutex.RLock()
	defer fake.dependenciesMutex.RUnlock()
	return len(fake.dependenciesArgsForCall)
}

func (fake *FakeDependencyManager) DependenciesArgsForCall(i int) string {
	fake.dependenciesMutex.RLock()
	defer fake.dependenciesMutex.RUnlock()
	return fake.dependenciesArgsForCall[i].id
}

func (fake *FakeDependencyManager) DependenciesReturns(result1 []string, result2 error) {
	fake.DependenciesStub = nil
	fake.dependenciesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDependencyManager) Register(id string, chainIDs []string) error {
	var chainIDsCopy []string
	if chainIDs != nil {
		chainIDsCopy = make([]string, len(chainIDs))
		copy(chainIDsCopy, chainIDs)
	}
	fake.registerMutex.Lock()
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		id       string
		chainIDs []string
	}{id, chainIDsCopy})
	fake.recordInvocation("Register", []interface{}{id, chainIDsCopy})
	fake.registerMutex.Unlock()
	if fake.RegisterStub != nil {
		return fake.RegisterStub(id, chainIDs)
	} else {
		return fake.registerReturns.result1
	}
}

func (fake *FakeDependencyManager) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeDependencyManager) RegisterArgsForCall(i int) (string, []string) {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return fake.registerArgsForCall[i].id, fake.registerArgsForCall[i].chainIDs
}

func (fake *FakeDependencyManager) RegisterReturns(result1 error) {
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDependencyManager) Deregister(id string) error {
	fake.deregisterMutex.Lock()
	fake.deregisterArgsForCall = append(fake.deregisterArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("Deregister", []interface{}{id})
	fake.deregisterMutex.Unlock()
	if fake.DeregisterStub != nil {
		return fake.DeregisterStub(id)
	} else {
		return fake.deregisterReturns.result1
	}
}

func (fake *FakeDependencyManager) DeregisterCallCount() int {
	fake.deregisterMutex.RLock()
	defer fake.deregisterMutex.RUnlock()
	return len(fake.deregisterArgsForCall)
}

func (fake *FakeDependencyManager) DeregisterArgsForCall(i int) string {
	fake.deregisterMutex.RLock()
	defer fake.deregisterMutex.RUnlock()
	return fake.deregisterArgsForCall[i].id
}

func (fake *FakeDependencyManager) DeregisterReturns(result1 error) {
	fake.DeregisterStub = nil
	fake.deregisterReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDependencyManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dependenciesMutex.RLock()
	defer fake.dependenciesMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	fake.deregisterMutex.RLock()
	defer fake.deregisterMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDependencyManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.DependencyManager = new(FakeDependencyManager)
