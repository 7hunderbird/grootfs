// This file was generated by counterfeiter
package grootfakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/lager"
)

type FakeMetricsEmitter struct {
	TryEmitDurationStub        func(logger lager.Logger, name string, duration time.Duration)
	tryEmitDurationMutex       sync.RWMutex
	tryEmitDurationArgsForCall []struct {
		logger   lager.Logger
		name     string
		duration time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsEmitter) TryEmitDuration(logger lager.Logger, name string, duration time.Duration) {
	fake.tryEmitDurationMutex.Lock()
	fake.tryEmitDurationArgsForCall = append(fake.tryEmitDurationArgsForCall, struct {
		logger   lager.Logger
		name     string
		duration time.Duration
	}{logger, name, duration})
	fake.recordInvocation("TryEmitDuration", []interface{}{logger, name, duration})
	fake.tryEmitDurationMutex.Unlock()
	if fake.TryEmitDurationStub != nil {
		fake.TryEmitDurationStub(logger, name, duration)
	}
}

func (fake *FakeMetricsEmitter) TryEmitDurationCallCount() int {
	fake.tryEmitDurationMutex.RLock()
	defer fake.tryEmitDurationMutex.RUnlock()
	return len(fake.tryEmitDurationArgsForCall)
}

func (fake *FakeMetricsEmitter) TryEmitDurationArgsForCall(i int) (lager.Logger, string, time.Duration) {
	fake.tryEmitDurationMutex.RLock()
	defer fake.tryEmitDurationMutex.RUnlock()
	return fake.tryEmitDurationArgsForCall[i].logger, fake.tryEmitDurationArgsForCall[i].name, fake.tryEmitDurationArgsForCall[i].duration
}

func (fake *FakeMetricsEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tryEmitDurationMutex.RLock()
	defer fake.tryEmitDurationMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMetricsEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.MetricsEmitter = new(FakeMetricsEmitter)
