// This file was generated by counterfeiter
package fetcherfakes

import (
	"io"
	"sync"

	"code.cloudfoundry.org/grootfs/fetcher"
	"code.cloudfoundry.org/lager"
)

type FakeImage struct {
	LayersDigestStub        func(logger lager.Logger) ([]string, error)
	layersDigestMutex       sync.RWMutex
	layersDigestArgsForCall []struct {
		logger lager.Logger
	}
	layersDigestReturns struct {
		result1 []string
		result2 error
	}
	PullLayerStub        func(logger lager.Logger, layer string) (io.ReadCloser, error)
	pullLayerMutex       sync.RWMutex
	pullLayerArgsForCall []struct {
		logger lager.Logger
		layer  string
	}
	pullLayerReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImage) LayersDigest(logger lager.Logger) ([]string, error) {
	fake.layersDigestMutex.Lock()
	fake.layersDigestArgsForCall = append(fake.layersDigestArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("LayersDigest", []interface{}{logger})
	fake.layersDigestMutex.Unlock()
	if fake.LayersDigestStub != nil {
		return fake.LayersDigestStub(logger)
	} else {
		return fake.layersDigestReturns.result1, fake.layersDigestReturns.result2
	}
}

func (fake *FakeImage) LayersDigestCallCount() int {
	fake.layersDigestMutex.RLock()
	defer fake.layersDigestMutex.RUnlock()
	return len(fake.layersDigestArgsForCall)
}

func (fake *FakeImage) LayersDigestArgsForCall(i int) lager.Logger {
	fake.layersDigestMutex.RLock()
	defer fake.layersDigestMutex.RUnlock()
	return fake.layersDigestArgsForCall[i].logger
}

func (fake *FakeImage) LayersDigestReturns(result1 []string, result2 error) {
	fake.LayersDigestStub = nil
	fake.layersDigestReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) PullLayer(logger lager.Logger, layer string) (io.ReadCloser, error) {
	fake.pullLayerMutex.Lock()
	fake.pullLayerArgsForCall = append(fake.pullLayerArgsForCall, struct {
		logger lager.Logger
		layer  string
	}{logger, layer})
	fake.recordInvocation("PullLayer", []interface{}{logger, layer})
	fake.pullLayerMutex.Unlock()
	if fake.PullLayerStub != nil {
		return fake.PullLayerStub(logger, layer)
	} else {
		return fake.pullLayerReturns.result1, fake.pullLayerReturns.result2
	}
}

func (fake *FakeImage) PullLayerCallCount() int {
	fake.pullLayerMutex.RLock()
	defer fake.pullLayerMutex.RUnlock()
	return len(fake.pullLayerArgsForCall)
}

func (fake *FakeImage) PullLayerArgsForCall(i int) (lager.Logger, string) {
	fake.pullLayerMutex.RLock()
	defer fake.pullLayerMutex.RUnlock()
	return fake.pullLayerArgsForCall[i].logger, fake.pullLayerArgsForCall[i].layer
}

func (fake *FakeImage) PullLayerReturns(result1 io.ReadCloser, result2 error) {
	fake.PullLayerStub = nil
	fake.pullLayerReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.layersDigestMutex.RLock()
	defer fake.layersDigestMutex.RUnlock()
	fake.pullLayerMutex.RLock()
	defer fake.pullLayerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeImage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetcher.Image = new(FakeImage)
