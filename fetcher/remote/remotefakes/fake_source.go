// This file was generated by counterfeiter
package remotefakes

import (
	"io"
	"net/url"
	"sync"

	"code.cloudfoundry.org/grootfs/fetcher/remote"
	"code.cloudfoundry.org/lager"
	specsv1 "github.com/opencontainers/image-spec/specs-go/v1"
)

type FakeSource struct {
	ManifestStub        func(logger lager.Logger, imageURL *url.URL) (remote.Manifest, error)
	manifestMutex       sync.RWMutex
	manifestArgsForCall []struct {
		logger   lager.Logger
		imageURL *url.URL
	}
	manifestReturns struct {
		result1 remote.Manifest
		result2 error
	}
	ConfigStub        func(logger lager.Logger, imageURL *url.URL, manifest remote.Manifest) (specsv1.Image, error)
	configMutex       sync.RWMutex
	configArgsForCall []struct {
		logger   lager.Logger
		imageURL *url.URL
		manifest remote.Manifest
	}
	configReturns struct {
		result1 specsv1.Image
		result2 error
	}
	StreamBlobStub        func(logger lager.Logger, imageURL *url.URL, digest string) (io.ReadCloser, int64, error)
	streamBlobMutex       sync.RWMutex
	streamBlobArgsForCall []struct {
		logger   lager.Logger
		imageURL *url.URL
		digest   string
	}
	streamBlobReturns struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSource) Manifest(logger lager.Logger, imageURL *url.URL) (remote.Manifest, error) {
	fake.manifestMutex.Lock()
	fake.manifestArgsForCall = append(fake.manifestArgsForCall, struct {
		logger   lager.Logger
		imageURL *url.URL
	}{logger, imageURL})
	fake.recordInvocation("Manifest", []interface{}{logger, imageURL})
	fake.manifestMutex.Unlock()
	if fake.ManifestStub != nil {
		return fake.ManifestStub(logger, imageURL)
	} else {
		return fake.manifestReturns.result1, fake.manifestReturns.result2
	}
}

func (fake *FakeSource) ManifestCallCount() int {
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	return len(fake.manifestArgsForCall)
}

func (fake *FakeSource) ManifestArgsForCall(i int) (lager.Logger, *url.URL) {
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	return fake.manifestArgsForCall[i].logger, fake.manifestArgsForCall[i].imageURL
}

func (fake *FakeSource) ManifestReturns(result1 remote.Manifest, result2 error) {
	fake.ManifestStub = nil
	fake.manifestReturns = struct {
		result1 remote.Manifest
		result2 error
	}{result1, result2}
}

func (fake *FakeSource) Config(logger lager.Logger, imageURL *url.URL, manifest remote.Manifest) (specsv1.Image, error) {
	fake.configMutex.Lock()
	fake.configArgsForCall = append(fake.configArgsForCall, struct {
		logger   lager.Logger
		imageURL *url.URL
		manifest remote.Manifest
	}{logger, imageURL, manifest})
	fake.recordInvocation("Config", []interface{}{logger, imageURL, manifest})
	fake.configMutex.Unlock()
	if fake.ConfigStub != nil {
		return fake.ConfigStub(logger, imageURL, manifest)
	} else {
		return fake.configReturns.result1, fake.configReturns.result2
	}
}

func (fake *FakeSource) ConfigCallCount() int {
	fake.configMutex.RLock()
	defer fake.configMutex.RUnlock()
	return len(fake.configArgsForCall)
}

func (fake *FakeSource) ConfigArgsForCall(i int) (lager.Logger, *url.URL, remote.Manifest) {
	fake.configMutex.RLock()
	defer fake.configMutex.RUnlock()
	return fake.configArgsForCall[i].logger, fake.configArgsForCall[i].imageURL, fake.configArgsForCall[i].manifest
}

func (fake *FakeSource) ConfigReturns(result1 specsv1.Image, result2 error) {
	fake.ConfigStub = nil
	fake.configReturns = struct {
		result1 specsv1.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeSource) StreamBlob(logger lager.Logger, imageURL *url.URL, digest string) (io.ReadCloser, int64, error) {
	fake.streamBlobMutex.Lock()
	fake.streamBlobArgsForCall = append(fake.streamBlobArgsForCall, struct {
		logger   lager.Logger
		imageURL *url.URL
		digest   string
	}{logger, imageURL, digest})
	fake.recordInvocation("StreamBlob", []interface{}{logger, imageURL, digest})
	fake.streamBlobMutex.Unlock()
	if fake.StreamBlobStub != nil {
		return fake.StreamBlobStub(logger, imageURL, digest)
	} else {
		return fake.streamBlobReturns.result1, fake.streamBlobReturns.result2, fake.streamBlobReturns.result3
	}
}

func (fake *FakeSource) StreamBlobCallCount() int {
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return len(fake.streamBlobArgsForCall)
}

func (fake *FakeSource) StreamBlobArgsForCall(i int) (lager.Logger, *url.URL, string) {
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return fake.streamBlobArgsForCall[i].logger, fake.streamBlobArgsForCall[i].imageURL, fake.streamBlobArgsForCall[i].digest
}

func (fake *FakeSource) StreamBlobReturns(result1 io.ReadCloser, result2 int64, result3 error) {
	fake.StreamBlobStub = nil
	fake.streamBlobReturns = struct {
		result1 io.ReadCloser
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	fake.configMutex.RLock()
	defer fake.configMutex.RUnlock()
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ remote.Source = new(FakeSource)
