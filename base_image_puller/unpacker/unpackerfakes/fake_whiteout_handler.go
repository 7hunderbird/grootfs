// Code generated by counterfeiter. DO NOT EDIT.
package unpackerfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/base_image_puller/unpacker"
)

type FakeWhiteoutHandler struct {
	RemoveWhiteoutStub        func(path string) error
	removeWhiteoutMutex       sync.RWMutex
	removeWhiteoutArgsForCall []struct {
		path string
	}
	removeWhiteoutReturns struct {
		result1 error
	}
	removeWhiteoutReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWhiteoutHandler) RemoveWhiteout(path string) error {
	fake.removeWhiteoutMutex.Lock()
	ret, specificReturn := fake.removeWhiteoutReturnsOnCall[len(fake.removeWhiteoutArgsForCall)]
	fake.removeWhiteoutArgsForCall = append(fake.removeWhiteoutArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("RemoveWhiteout", []interface{}{path})
	fake.removeWhiteoutMutex.Unlock()
	if fake.RemoveWhiteoutStub != nil {
		return fake.RemoveWhiteoutStub(path)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeWhiteoutReturns.result1
}

func (fake *FakeWhiteoutHandler) RemoveWhiteoutCallCount() int {
	fake.removeWhiteoutMutex.RLock()
	defer fake.removeWhiteoutMutex.RUnlock()
	return len(fake.removeWhiteoutArgsForCall)
}

func (fake *FakeWhiteoutHandler) RemoveWhiteoutArgsForCall(i int) string {
	fake.removeWhiteoutMutex.RLock()
	defer fake.removeWhiteoutMutex.RUnlock()
	return fake.removeWhiteoutArgsForCall[i].path
}

func (fake *FakeWhiteoutHandler) RemoveWhiteoutReturns(result1 error) {
	fake.RemoveWhiteoutStub = nil
	fake.removeWhiteoutReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWhiteoutHandler) RemoveWhiteoutReturnsOnCall(i int, result1 error) {
	fake.RemoveWhiteoutStub = nil
	if fake.removeWhiteoutReturnsOnCall == nil {
		fake.removeWhiteoutReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeWhiteoutReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWhiteoutHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeWhiteoutMutex.RLock()
	defer fake.removeWhiteoutMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWhiteoutHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ unpacker.WhiteoutHandler = new(FakeWhiteoutHandler)
