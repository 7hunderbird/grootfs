// This file was generated by counterfeiter
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
)

type FakeBundle struct {
	PathStub        func() string
	pathMutex       sync.RWMutex
	pathArgsForCall []struct{}
	pathReturns     struct {
		result1 string
	}
	RootFsPathStub        func() string
	rootFsPathMutex       sync.RWMutex
	rootFsPathArgsForCall []struct{}
	rootFsPathReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBundle) Path() string {
	fake.pathMutex.Lock()
	fake.pathArgsForCall = append(fake.pathArgsForCall, struct{}{})
	fake.recordInvocation("Path", []interface{}{})
	fake.pathMutex.Unlock()
	if fake.PathStub != nil {
		return fake.PathStub()
	} else {
		return fake.pathReturns.result1
	}
}

func (fake *FakeBundle) PathCallCount() int {
	fake.pathMutex.RLock()
	defer fake.pathMutex.RUnlock()
	return len(fake.pathArgsForCall)
}

func (fake *FakeBundle) PathReturns(result1 string) {
	fake.PathStub = nil
	fake.pathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBundle) RootFsPath() string {
	fake.rootFsPathMutex.Lock()
	fake.rootFsPathArgsForCall = append(fake.rootFsPathArgsForCall, struct{}{})
	fake.recordInvocation("RootFsPath", []interface{}{})
	fake.rootFsPathMutex.Unlock()
	if fake.RootFsPathStub != nil {
		return fake.RootFsPathStub()
	} else {
		return fake.rootFsPathReturns.result1
	}
}

func (fake *FakeBundle) RootFsPathCallCount() int {
	fake.rootFsPathMutex.RLock()
	defer fake.rootFsPathMutex.RUnlock()
	return len(fake.rootFsPathArgsForCall)
}

func (fake *FakeBundle) RootFsPathReturns(result1 string) {
	fake.RootFsPathStub = nil
	fake.rootFsPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBundle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pathMutex.RLock()
	defer fake.pathMutex.RUnlock()
	fake.rootFsPathMutex.RLock()
	defer fake.rootFsPathMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBundle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.Bundle = new(FakeBundle)
