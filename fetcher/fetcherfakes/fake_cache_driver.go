// This file was generated by counterfeiter
package fetcherfakes

import (
	"io"
	"sync"

	"code.cloudfoundry.org/grootfs/fetcher"
	"code.cloudfoundry.org/lager"
)

type FakeCacheDriver struct {
	BlobStub        func(logger lager.Logger, id string, streamBlob fetcher.StreamBlob) (io.ReadCloser, error)
	blobMutex       sync.RWMutex
	blobArgsForCall []struct {
		logger     lager.Logger
		id         string
		streamBlob fetcher.StreamBlob
	}
	blobReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCacheDriver) Blob(logger lager.Logger, id string, streamBlob fetcher.StreamBlob) (io.ReadCloser, error) {
	fake.blobMutex.Lock()
	fake.blobArgsForCall = append(fake.blobArgsForCall, struct {
		logger     lager.Logger
		id         string
		streamBlob fetcher.StreamBlob
	}{logger, id, streamBlob})
	fake.recordInvocation("Blob", []interface{}{logger, id, streamBlob})
	fake.blobMutex.Unlock()
	if fake.BlobStub != nil {
		return fake.BlobStub(logger, id, streamBlob)
	} else {
		return fake.blobReturns.result1, fake.blobReturns.result2
	}
}

func (fake *FakeCacheDriver) BlobCallCount() int {
	fake.blobMutex.RLock()
	defer fake.blobMutex.RUnlock()
	return len(fake.blobArgsForCall)
}

func (fake *FakeCacheDriver) BlobArgsForCall(i int) (lager.Logger, string, fetcher.StreamBlob) {
	fake.blobMutex.RLock()
	defer fake.blobMutex.RUnlock()
	return fake.blobArgsForCall[i].logger, fake.blobArgsForCall[i].id, fake.blobArgsForCall[i].streamBlob
}

func (fake *FakeCacheDriver) BlobReturns(result1 io.ReadCloser, result2 error) {
	fake.BlobStub = nil
	fake.blobReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeCacheDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.blobMutex.RLock()
	defer fake.blobMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCacheDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetcher.CacheDriver = new(FakeCacheDriver)
