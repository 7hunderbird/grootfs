// This file was generated by counterfeiter
package fetcherfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/fetcher"
	"code.cloudfoundry.org/grootfs/image_puller"
	"code.cloudfoundry.org/lager"
)

type FakeCacheDriver struct {
	StreamBlobStub        func(logger lager.Logger, id string, remoteBlobFunc fetcher.RemoteBlobFunc) (image_puller.Stream, error)
	streamBlobMutex       sync.RWMutex
	streamBlobArgsForCall []struct {
		logger         lager.Logger
		id             string
		remoteBlobFunc fetcher.RemoteBlobFunc
	}
	streamBlobReturns struct {
		result1 image_puller.Stream
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCacheDriver) StreamBlob(logger lager.Logger, id string, remoteBlobFunc fetcher.RemoteBlobFunc) (image_puller.Stream, error) {
	fake.streamBlobMutex.Lock()
	fake.streamBlobArgsForCall = append(fake.streamBlobArgsForCall, struct {
		logger         lager.Logger
		id             string
		remoteBlobFunc fetcher.RemoteBlobFunc
	}{logger, id, remoteBlobFunc})
	fake.recordInvocation("StreamBlob", []interface{}{logger, id, remoteBlobFunc})
	fake.streamBlobMutex.Unlock()
	if fake.StreamBlobStub != nil {
		return fake.StreamBlobStub(logger, id, remoteBlobFunc)
	} else {
		return fake.streamBlobReturns.result1, fake.streamBlobReturns.result2
	}
}

func (fake *FakeCacheDriver) StreamBlobCallCount() int {
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return len(fake.streamBlobArgsForCall)
}

func (fake *FakeCacheDriver) StreamBlobArgsForCall(i int) (lager.Logger, string, fetcher.RemoteBlobFunc) {
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return fake.streamBlobArgsForCall[i].logger, fake.streamBlobArgsForCall[i].id, fake.streamBlobArgsForCall[i].remoteBlobFunc
}

func (fake *FakeCacheDriver) StreamBlobReturns(result1 image_puller.Stream, result2 error) {
	fake.StreamBlobStub = nil
	fake.streamBlobReturns = struct {
		result1 image_puller.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeCacheDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.streamBlobMutex.RLock()
	defer fake.streamBlobMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCacheDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetcher.CacheDriver = new(FakeCacheDriver)
