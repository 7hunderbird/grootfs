// This file was generated by counterfeiter
package managerfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/grootfs/store/manager"
)

type FakeNamespaceWriter struct {
	WriteStub        func(storePath string, uidMappings, gidMappings []groot.IDMappingSpec) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		storePath   string
		uidMappings []groot.IDMappingSpec
		gidMappings []groot.IDMappingSpec
	}
	writeReturns struct {
		result1 error
	}
	writeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNamespaceWriter) Write(storePath string, uidMappings []groot.IDMappingSpec, gidMappings []groot.IDMappingSpec) error {
	var uidMappingsCopy []groot.IDMappingSpec
	if uidMappings != nil {
		uidMappingsCopy = make([]groot.IDMappingSpec, len(uidMappings))
		copy(uidMappingsCopy, uidMappings)
	}
	var gidMappingsCopy []groot.IDMappingSpec
	if gidMappings != nil {
		gidMappingsCopy = make([]groot.IDMappingSpec, len(gidMappings))
		copy(gidMappingsCopy, gidMappings)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		storePath   string
		uidMappings []groot.IDMappingSpec
		gidMappings []groot.IDMappingSpec
	}{storePath, uidMappingsCopy, gidMappingsCopy})
	fake.recordInvocation("Write", []interface{}{storePath, uidMappingsCopy, gidMappingsCopy})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(storePath, uidMappings, gidMappings)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeReturns.result1
}

func (fake *FakeNamespaceWriter) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeNamespaceWriter) WriteArgsForCall(i int) (string, []groot.IDMappingSpec, []groot.IDMappingSpec) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].storePath, fake.writeArgsForCall[i].uidMappings, fake.writeArgsForCall[i].gidMappings
}

func (fake *FakeNamespaceWriter) WriteReturns(result1 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNamespaceWriter) WriteReturnsOnCall(i int, result1 error) {
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNamespaceWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNamespaceWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ manager.NamespaceWriter = new(FakeNamespaceWriter)
