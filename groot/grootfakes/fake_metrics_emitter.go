// This file was generated by counterfeiter
package grootfakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/grootfs/groot"
)

type FakeMetricsEmitter struct {
	EmitDurationStub        func(name string, duration time.Duration) error
	emitDurationMutex       sync.RWMutex
	emitDurationArgsForCall []struct {
		name     string
		duration time.Duration
	}
	emitDurationReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsEmitter) EmitDuration(name string, duration time.Duration) error {
	fake.emitDurationMutex.Lock()
	fake.emitDurationArgsForCall = append(fake.emitDurationArgsForCall, struct {
		name     string
		duration time.Duration
	}{name, duration})
	fake.recordInvocation("EmitDuration", []interface{}{name, duration})
	fake.emitDurationMutex.Unlock()
	if fake.EmitDurationStub != nil {
		return fake.EmitDurationStub(name, duration)
	} else {
		return fake.emitDurationReturns.result1
	}
}

func (fake *FakeMetricsEmitter) EmitDurationCallCount() int {
	fake.emitDurationMutex.RLock()
	defer fake.emitDurationMutex.RUnlock()
	return len(fake.emitDurationArgsForCall)
}

func (fake *FakeMetricsEmitter) EmitDurationArgsForCall(i int) (string, time.Duration) {
	fake.emitDurationMutex.RLock()
	defer fake.emitDurationMutex.RUnlock()
	return fake.emitDurationArgsForCall[i].name, fake.emitDurationArgsForCall[i].duration
}

func (fake *FakeMetricsEmitter) EmitDurationReturns(result1 error) {
	fake.EmitDurationStub = nil
	fake.emitDurationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMetricsEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.emitDurationMutex.RLock()
	defer fake.emitDurationMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMetricsEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.MetricsEmitter = new(FakeMetricsEmitter)
