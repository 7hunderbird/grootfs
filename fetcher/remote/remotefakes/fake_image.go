// This file was generated by counterfeiter
package remotefakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/fetcher/remote"
	"code.cloudfoundry.org/lager"
	specsv1 "github.com/opencontainers/image-spec/specs-go/v1"
)

type FakeImage struct {
	ManifestStub        func(logger lager.Logger) (specsv1.Manifest, error)
	manifestMutex       sync.RWMutex
	manifestArgsForCall []struct {
		logger lager.Logger
	}
	manifestReturns struct {
		result1 specsv1.Manifest
		result2 error
	}
	ConfigStub        func(logger lager.Logger) (specsv1.Image, error)
	configMutex       sync.RWMutex
	configArgsForCall []struct {
		logger lager.Logger
	}
	configReturns struct {
		result1 specsv1.Image
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImage) Manifest(logger lager.Logger) (specsv1.Manifest, error) {
	fake.manifestMutex.Lock()
	fake.manifestArgsForCall = append(fake.manifestArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("Manifest", []interface{}{logger})
	fake.manifestMutex.Unlock()
	if fake.ManifestStub != nil {
		return fake.ManifestStub(logger)
	} else {
		return fake.manifestReturns.result1, fake.manifestReturns.result2
	}
}

func (fake *FakeImage) ManifestCallCount() int {
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	return len(fake.manifestArgsForCall)
}

func (fake *FakeImage) ManifestArgsForCall(i int) lager.Logger {
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	return fake.manifestArgsForCall[i].logger
}

func (fake *FakeImage) ManifestReturns(result1 specsv1.Manifest, result2 error) {
	fake.ManifestStub = nil
	fake.manifestReturns = struct {
		result1 specsv1.Manifest
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) Config(logger lager.Logger) (specsv1.Image, error) {
	fake.configMutex.Lock()
	fake.configArgsForCall = append(fake.configArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("Config", []interface{}{logger})
	fake.configMutex.Unlock()
	if fake.ConfigStub != nil {
		return fake.ConfigStub(logger)
	} else {
		return fake.configReturns.result1, fake.configReturns.result2
	}
}

func (fake *FakeImage) ConfigCallCount() int {
	fake.configMutex.RLock()
	defer fake.configMutex.RUnlock()
	return len(fake.configArgsForCall)
}

func (fake *FakeImage) ConfigArgsForCall(i int) lager.Logger {
	fake.configMutex.RLock()
	defer fake.configMutex.RUnlock()
	return fake.configArgsForCall[i].logger
}

func (fake *FakeImage) ConfigReturns(result1 specsv1.Image, result2 error) {
	fake.ConfigStub = nil
	fake.configReturns = struct {
		result1 specsv1.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	fake.configMutex.RLock()
	defer fake.configMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeImage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ remote.Image = new(FakeImage)
