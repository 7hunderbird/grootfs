// This file was generated by counterfeiter
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/groot"
	"code.cloudfoundry.org/lager"
)

type FakeCloner struct {
	CloneStub        func(logger lager.Logger, spec groot.CloneSpec) error
	cloneMutex       sync.RWMutex
	cloneArgsForCall []struct {
		logger lager.Logger
		spec   groot.CloneSpec
	}
	cloneReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloner) Clone(logger lager.Logger, spec groot.CloneSpec) error {
	fake.cloneMutex.Lock()
	fake.cloneArgsForCall = append(fake.cloneArgsForCall, struct {
		logger lager.Logger
		spec   groot.CloneSpec
	}{logger, spec})
	fake.recordInvocation("Clone", []interface{}{logger, spec})
	fake.cloneMutex.Unlock()
	if fake.CloneStub != nil {
		return fake.CloneStub(logger, spec)
	} else {
		return fake.cloneReturns.result1
	}
}

func (fake *FakeCloner) CloneCallCount() int {
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	return len(fake.cloneArgsForCall)
}

func (fake *FakeCloner) CloneArgsForCall(i int) (lager.Logger, groot.CloneSpec) {
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	return fake.cloneArgsForCall[i].logger, fake.cloneArgsForCall[i].spec
}

func (fake *FakeCloner) CloneReturns(result1 error) {
	fake.CloneStub = nil
	fake.cloneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCloner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.Cloner = new(FakeCloner)
