// This file was generated by counterfeiter
package garbage_collectorfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs/store/garbage_collector"
	"code.cloudfoundry.org/lager"
)

type FakeBundler struct {
	BundleIDsStub        func(logger lager.Logger) ([]string, error)
	bundleIDsMutex       sync.RWMutex
	bundleIDsArgsForCall []struct {
		logger lager.Logger
	}
	bundleIDsReturns struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBundler) BundleIDs(logger lager.Logger) ([]string, error) {
	fake.bundleIDsMutex.Lock()
	fake.bundleIDsArgsForCall = append(fake.bundleIDsArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("BundleIDs", []interface{}{logger})
	fake.bundleIDsMutex.Unlock()
	if fake.BundleIDsStub != nil {
		return fake.BundleIDsStub(logger)
	} else {
		return fake.bundleIDsReturns.result1, fake.bundleIDsReturns.result2
	}
}

func (fake *FakeBundler) BundleIDsCallCount() int {
	fake.bundleIDsMutex.RLock()
	defer fake.bundleIDsMutex.RUnlock()
	return len(fake.bundleIDsArgsForCall)
}

func (fake *FakeBundler) BundleIDsArgsForCall(i int) lager.Logger {
	fake.bundleIDsMutex.RLock()
	defer fake.bundleIDsMutex.RUnlock()
	return fake.bundleIDsArgsForCall[i].logger
}

func (fake *FakeBundler) BundleIDsReturns(result1 []string, result2 error) {
	fake.BundleIDsStub = nil
	fake.bundleIDsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeBundler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bundleIDsMutex.RLock()
	defer fake.bundleIDsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBundler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ garbage_collector.Bundler = new(FakeBundler)
